// 即時関数  byトラハックさん



// ①ソースコードの保守性の高め方
// ②即時関数が保守性を高める理由
// ③即時関数を使うメリット
// ④JavaScriptのスコープとは
// ⑤即時関数の使い方
// ⑥即時関数を活用してasync/await


// ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー


// ①ソースコードの保守性の高め方

// ファイル分割 → 半分正解
// 正）→ ＋α カプセル化しよう

// 機能ごとに分割したファイルをカプセルで包んで、
// 他の機能に影響しなくなるようなイメージ

// どうやってカプセル化する？？
// ①機能ごとにファイルを分割
// ②ファイル内のコードを即時関数でラップ
// ③即時関数内で以下を記述
//    ①初期化
//    ②メソッド

// なぜカプセル化するのか？？
// ①スコープを限定できる
// ②擬似的なオブジェクト指向開発（JSでは基本的にできない）
//    ①再利用できる
//    ②必要なときに呼び出せる

// JavaScriptのスコープとは？？
// ・同じ名前をつけてよい範囲・空間
//    ❌家族内
//    ⭕町内
// ・JavaScriptのスコープは2種類
//    ①グローバルスコープ
//    ②関数スコープ


// ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー


// 即時関数によるカプセル化

// ()を増やすことで即時関数になる（最初と最後）

const headerModule = (() => {
  // 初期化処理
  let counter = 0;

  return {
    // メソッド化
    countUp: () => {
      counter += 1
      console.log("現在のカウントは", counter)
    },
    selectMenu: () => {
      console.log("ヘッダーのメニュー")
    }
  }
})();


// ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー


// 【番外編】
// 即時関数でasyncを使う

(async() => {

  const url = 'https.....'

  const json = await fetch(url)
    .then(res => {
      return res.json()
    }).catch(error => {
      return null
    });

  console.log(json.login)

})()

