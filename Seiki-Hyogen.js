// 正規表現


// 正規表現とは
// ・文字列の組み合わせを照合（マッチ）するためのパターン
// ・JavaScriptではRegExpオブジェクトとして扱う


// 正規表現を使う場面
// ・入力値が正しいフォーマットかチェック
// ・統一のフォーマットに変換する
// ・URLに応じて表示する情報を切り替える
// ...etc


// ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー


// 正規表現オブジェクトの作り方

// ① コンストラクタ記法
const regex = new RegExp('[^0-9]', 'g')

// ② リテラル記法
const regex = /[^0-9]/g

// どちらを使ってもOK

// '[^0-9]'・・・パターン
// 'g'・・・オプション


// ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー


// 正規表現パターンの基礎知識①

// 特殊文字が何にマッチするか

^
// 入力の先頭

$
// 入力の末尾

*
// 直前の0回以上の繰り返し

+
// 直前の1回以上の繰り返し

?
// 直前の0回か1回

.
// 改行文字以外の1文字

(x)
// ()内に指定した文字列

x|y
// 指定した文字列のどちらか

{n}
// 直前のn回の繰り返し

{n,}
// 直前の少なくともn回の繰り返し


// ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー


// 正規表現パターンの基礎知識②

// 文字集合パターン

/[0-9]/
// 数値（0から9のいずれか）

/[a-z]/
// 英小文字（aからzのいずれか）

/[A-Z]/
// 英大文字（AからZのいずれか）

/[a-z0-9A-Z]/
// 英数大小字

/[^0-9]/
// 数値以外（0から9ではない）


// ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー


// 特殊文字のエスケープ

// パターン内でバックスラッシュ「\」を使う

const pattern = /\/posts\/*/

const pattern = /^[a-zA-Z0-9]*@gmail\.com/
// @gmail.comをマッチ


// ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー


String.prototype.replace()

// 正規表現でマッチする文字列を置換する

const telWithHyphen = '080-1234-5678'
const tel = telWithHyphen.replace(/[^0-9]/g, '')

console.log(tel)
// output: 08012345678


// ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー


String.prototype.match()

// 正規表現でマッチする文字列を抽出する

const pattern = /[0-9]{5}/
const str = "0123456789"
const result = str.match(pattern)

// result ＝ 返り値は配列

console.log(result[0])
// output: 01234


// ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー


